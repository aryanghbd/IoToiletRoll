{"ast":null,"code":"'use strict';\n/**\n * Module dependencies\n */\n\nconst LruMap = require('lru-cache');\n\nconst NumberAllocator = require('number-allocator').NumberAllocator;\n/**\n * Topic Alias sending manager\n * This holds both topic to alias and alias to topic map\n * @param {Number} [max] - topic alias maximum entries\n */\n\n\nfunction TopicAliasSend(max) {\n  if (!(this instanceof TopicAliasSend)) {\n    return new TopicAliasSend(max);\n  }\n\n  if (max > 0) {\n    this.aliasToTopic = new LruMap({\n      max: max\n    });\n    this.topicToAlias = {};\n    this.numberAllocator = new NumberAllocator(1, max);\n    this.max = max;\n    this.length = 0;\n  }\n}\n/**\n * Insert or update topic - alias entry.\n * @param {String} [topic] - topic\n * @param {Number} [alias] - topic alias\n * @returns {Boolean} - if success return true otherwise false\n */\n\n\nTopicAliasSend.prototype.put = function (topic, alias) {\n  if (alias === 0 || alias > this.max) {\n    return false;\n  }\n\n  const entry = this.aliasToTopic.get(alias);\n\n  if (entry) {\n    delete this.topicToAlias[entry];\n  }\n\n  this.aliasToTopic.set(alias, topic);\n  this.topicToAlias[topic] = alias;\n  this.numberAllocator.use(alias);\n  this.length = this.aliasToTopic.length;\n  return true;\n};\n/**\n * Get topic by alias\n * @param {Number} [alias] - topic alias\n * @returns {String} - if mapped topic exists return topic, otherwise return undefined\n */\n\n\nTopicAliasSend.prototype.getTopicByAlias = function (alias) {\n  return this.aliasToTopic.get(alias);\n};\n/**\n * Get topic by alias\n * @param {String} [topic] - topic\n * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined\n */\n\n\nTopicAliasSend.prototype.getAliasByTopic = function (topic) {\n  const alias = this.topicToAlias[topic];\n\n  if (typeof alias !== 'undefined') {\n    this.aliasToTopic.get(alias); // LRU update\n  }\n\n  return alias;\n};\n/**\n * Clear all entries\n */\n\n\nTopicAliasSend.prototype.clear = function () {\n  this.aliasToTopic.reset();\n  this.topicToAlias = {};\n  this.numberAllocator.clear();\n  this.length = 0;\n};\n/**\n * Get Least Recently Used (LRU) topic alias\n * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias\n */\n\n\nTopicAliasSend.prototype.getLruAlias = function () {\n  const alias = this.numberAllocator.firstVacant();\n  if (alias) return alias;\n  return this.aliasToTopic.keys()[this.aliasToTopic.length - 1];\n};\n\nmodule.exports = TopicAliasSend;","map":{"version":3,"sources":["/Users/hollysolomon/Documents/year3/EmbeddedSys/EmbeddedSystems22/webapp/MERN-stack-login-authentication/node_modules/mqtt/lib/topic-alias-send.js"],"names":["LruMap","require","NumberAllocator","TopicAliasSend","max","aliasToTopic","topicToAlias","numberAllocator","length","prototype","put","topic","alias","entry","get","set","use","getTopicByAlias","getAliasByTopic","clear","reset","getLruAlias","firstVacant","keys","module","exports"],"mappings":"AAAA;AAEA;;;;AAGA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,eAApD;AAEA;;;;;;;AAKA,SAASC,cAAT,CAAyBC,GAAzB,EAA8B;AAC5B,MAAI,EAAE,gBAAgBD,cAAlB,CAAJ,EAAuC;AACrC,WAAO,IAAIA,cAAJ,CAAmBC,GAAnB,CAAP;AACD;;AAED,MAAIA,GAAG,GAAG,CAAV,EAAa;AACX,SAAKC,YAAL,GAAoB,IAAIL,MAAJ,CAAW;AAAEI,MAAAA,GAAG,EAAEA;AAAP,KAAX,CAApB;AACA,SAAKE,YAAL,GAAoB,EAApB;AACA,SAAKC,eAAL,GAAuB,IAAIL,eAAJ,CAAoB,CAApB,EAAuBE,GAAvB,CAAvB;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKI,MAAL,GAAc,CAAd;AACD;AACF;AAED;;;;;;;;AAMAL,cAAc,CAACM,SAAf,CAAyBC,GAAzB,GAA+B,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACrD,MAAIA,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAG,KAAKR,GAAhC,EAAqC;AACnC,WAAO,KAAP;AACD;;AACD,QAAMS,KAAK,GAAG,KAAKR,YAAL,CAAkBS,GAAlB,CAAsBF,KAAtB,CAAd;;AACA,MAAIC,KAAJ,EAAW;AACT,WAAO,KAAKP,YAAL,CAAkBO,KAAlB,CAAP;AACD;;AACD,OAAKR,YAAL,CAAkBU,GAAlB,CAAsBH,KAAtB,EAA6BD,KAA7B;AACA,OAAKL,YAAL,CAAkBK,KAAlB,IAA2BC,KAA3B;AACA,OAAKL,eAAL,CAAqBS,GAArB,CAAyBJ,KAAzB;AACA,OAAKJ,MAAL,GAAc,KAAKH,YAAL,CAAkBG,MAAhC;AACA,SAAO,IAAP;AACD,CAbD;AAeA;;;;;;;AAKAL,cAAc,CAACM,SAAf,CAAyBQ,eAAzB,GAA2C,UAAUL,KAAV,EAAiB;AAC1D,SAAO,KAAKP,YAAL,CAAkBS,GAAlB,CAAsBF,KAAtB,CAAP;AACD,CAFD;AAIA;;;;;;;AAKAT,cAAc,CAACM,SAAf,CAAyBS,eAAzB,GAA2C,UAAUP,KAAV,EAAiB;AAC1D,QAAMC,KAAK,GAAG,KAAKN,YAAL,CAAkBK,KAAlB,CAAd;;AACA,MAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAChC,SAAKP,YAAL,CAAkBS,GAAlB,CAAsBF,KAAtB,EADgC,CACH;AAC9B;;AACD,SAAOA,KAAP;AACD,CAND;AAQA;;;;;AAGAT,cAAc,CAACM,SAAf,CAAyBU,KAAzB,GAAiC,YAAY;AAC3C,OAAKd,YAAL,CAAkBe,KAAlB;AACA,OAAKd,YAAL,GAAoB,EAApB;AACA,OAAKC,eAAL,CAAqBY,KAArB;AACA,OAAKX,MAAL,GAAc,CAAd;AACD,CALD;AAOA;;;;;;AAIAL,cAAc,CAACM,SAAf,CAAyBY,WAAzB,GAAuC,YAAY;AACjD,QAAMT,KAAK,GAAG,KAAKL,eAAL,CAAqBe,WAArB,EAAd;AACA,MAAIV,KAAJ,EAAW,OAAOA,KAAP;AACX,SAAO,KAAKP,YAAL,CAAkBkB,IAAlB,GAAyB,KAAKlB,YAAL,CAAkBG,MAAlB,GAA2B,CAApD,CAAP;AACD,CAJD;;AAMAgB,MAAM,CAACC,OAAP,GAAiBtB,cAAjB","sourcesContent":["'use strict'\n\n/**\n * Module dependencies\n */\nconst LruMap = require('lru-cache')\nconst NumberAllocator = require('number-allocator').NumberAllocator\n\n/**\n * Topic Alias sending manager\n * This holds both topic to alias and alias to topic map\n * @param {Number} [max] - topic alias maximum entries\n */\nfunction TopicAliasSend (max) {\n  if (!(this instanceof TopicAliasSend)) {\n    return new TopicAliasSend(max)\n  }\n\n  if (max > 0) {\n    this.aliasToTopic = new LruMap({ max: max })\n    this.topicToAlias = {}\n    this.numberAllocator = new NumberAllocator(1, max)\n    this.max = max\n    this.length = 0\n  }\n}\n\n/**\n * Insert or update topic - alias entry.\n * @param {String} [topic] - topic\n * @param {Number} [alias] - topic alias\n * @returns {Boolean} - if success return true otherwise false\n */\nTopicAliasSend.prototype.put = function (topic, alias) {\n  if (alias === 0 || alias > this.max) {\n    return false\n  }\n  const entry = this.aliasToTopic.get(alias)\n  if (entry) {\n    delete this.topicToAlias[entry]\n  }\n  this.aliasToTopic.set(alias, topic)\n  this.topicToAlias[topic] = alias\n  this.numberAllocator.use(alias)\n  this.length = this.aliasToTopic.length\n  return true\n}\n\n/**\n * Get topic by alias\n * @param {Number} [alias] - topic alias\n * @returns {String} - if mapped topic exists return topic, otherwise return undefined\n */\nTopicAliasSend.prototype.getTopicByAlias = function (alias) {\n  return this.aliasToTopic.get(alias)\n}\n\n/**\n * Get topic by alias\n * @param {String} [topic] - topic\n * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined\n */\nTopicAliasSend.prototype.getAliasByTopic = function (topic) {\n  const alias = this.topicToAlias[topic]\n  if (typeof alias !== 'undefined') {\n    this.aliasToTopic.get(alias) // LRU update\n  }\n  return alias\n}\n\n/**\n * Clear all entries\n */\nTopicAliasSend.prototype.clear = function () {\n  this.aliasToTopic.reset()\n  this.topicToAlias = {}\n  this.numberAllocator.clear()\n  this.length = 0\n}\n\n/**\n * Get Least Recently Used (LRU) topic alias\n * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias\n */\nTopicAliasSend.prototype.getLruAlias = function () {\n  const alias = this.numberAllocator.firstVacant()\n  if (alias) return alias\n  return this.aliasToTopic.keys()[this.aliasToTopic.length - 1]\n}\n\nmodule.exports = TopicAliasSend\n"]},"metadata":{},"sourceType":"script"}